//auto-generated by GenerateAST.cs
using System;

namespace SharpLox
{
	public abstract class Expr
	{
		public interface Visitor<T>
		{
			T VisitBinaryExpr(Binary expr);
			T VisitGroupingExpr(Grouping expr);
			T VisitLiteralExpr(Literal expr);
			T VisitUnaryExpr(Unary expr);
		}
		
		public abstract T Accept<T>(Visitor<T> visitor);
		
		public class Binary:Expr
		{
			public Expr left;
			public Token op;
			public Expr right;
			
			public Binary(Expr left, Token op, Expr right)
			{
				this.left = left;
				this.op = op;
				this.right = right;
			}
			
			override public T Accept<T>(Visitor<T> visitor)
			{
				return visitor.VisitBinaryExpr(this);
			}
		}
		
		public class Grouping:Expr
		{
			public Expr expression;
			
			public Grouping(Expr expression)
			{
				this.expression = expression;
			}
			
			override public T Accept<T>(Visitor<T> visitor)
			{
				return visitor.VisitGroupingExpr(this);
			}
		}
		
		public class Literal:Expr
		{
			public Object value;
			
			public Literal(Object value)
			{
				this.value = value;
			}
			
			override public T Accept<T>(Visitor<T> visitor)
			{
				return visitor.VisitLiteralExpr(this);
			}
		}
		
		public class Unary:Expr
		{
			public Token op;
			public Expr right;
			
			public Unary(Token op, Expr right)
			{
				this.op = op;
				this.right = right;
			}
			
			override public T Accept<T>(Visitor<T> visitor)
			{
				return visitor.VisitUnaryExpr(this);
			}
		}
		
	}
}

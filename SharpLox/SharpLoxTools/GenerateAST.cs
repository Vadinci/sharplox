using System;
using System.IO;

namespace SharpLoxTools
{
    //small wrapper around StreamWriter which does some naive indentation
    public class Writer
    {
        StreamWriter _out;
        int _indent = 0;

        public Writer(string path)
        {
            _out = new StreamWriter(path);
        }

        public void WriteLine(string line)
        {
            if (line == "}") _indent--;

            string indentation = "";
            for (int ii = 0; ii < _indent; ii++)
            {
                indentation += "\t";
            }
            _out.WriteLine(indentation + line);

            if (line == "{") _indent++;
        }

        public void Close()
        {
            _out.Close();
        }
    }



    public class GenerateAST
    {
        public static void Run(string outputDir)
        {
            DefineAST(outputDir, "Expr", new string[] {
                "Binary   : Expr left, Token op, Expr right",
                "Grouping : Expr expression",
                "Literal  : Object value",
                "Unary    : Token op, Expr right"
            });
        }


        private static void DefineAST(string outputDir, string baseName, string[] types)
        {
            string path = outputDir + "/" + baseName + ".cs";

            Writer writer = new Writer(path);

            writer.WriteLine("//auto-generated by GenerateAST.cs");
            writer.WriteLine("using System;");
            writer.WriteLine("");
            writer.WriteLine("namespace SharpLox");
            writer.WriteLine("{");


            writer.WriteLine($"public abstract class {baseName}");
            writer.WriteLine("{");

            DefineVisitor(writer, baseName, types);


            writer.WriteLine($"public abstract T Accept<T>(Visitor<T> visitor);");



            //content goes here
            writer.WriteLine("");


            foreach (string type in types)
            {
                string className = type.Split(':')[0].Trim();
                string fields = type.Split(':')[1].Trim();
                DefineType(writer, baseName, className, fields);
            }


            writer.WriteLine("}");

            writer.WriteLine("}");

            writer.Close();

        }

        private static void DefineVisitor(Writer writer, string baseName, string[] types)
        {
            writer.WriteLine("public interface Visitor<T>");
            writer.WriteLine("{");
            foreach (string type in types)
            {
                string typename = type.Split(":")[0].Trim();
                writer.WriteLine($"T Visit{typename}{baseName}({typename} {baseName.ToLower()});");
            }
            writer.WriteLine("}");
            writer.WriteLine("");
        }

        private static void DefineType(Writer writer, string baseName, string className, string fields)
        {
            string[] fieldArray = fields.Split(',');


            writer.WriteLine($"public class {className}:{baseName}");
            writer.WriteLine("{");

            foreach (string field in fieldArray)
            {
                writer.WriteLine($"public {field.Trim()};");
            }

            writer.WriteLine("");
            writer.WriteLine($"public {className}({fields})");
            writer.WriteLine("{");

            foreach (string field in fieldArray)
            {
                string fieldName = field.Trim().Split(" ")[1];
                writer.WriteLine($"this.{fieldName} = {fieldName};");
            }
            writer.WriteLine("}");
            writer.WriteLine("");
            writer.WriteLine("override public T Accept<T>(Visitor<T> visitor)");
            writer.WriteLine("{");
            writer.WriteLine($"return visitor.Visit{className}{baseName}(this);");
            writer.WriteLine("}");

            writer.WriteLine("}");
            writer.WriteLine("");
        }
    }
}
